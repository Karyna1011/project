// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add": {
            "post": {
                "description": "Adds record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "description": "Gets encoded data and sender's address",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GatewayRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    }
                }
            }
        },
        "/get/{name}": {
            "get": {
                "description": "Get record by uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "GetByIndex",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of record",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resources.PersonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    }
                }
            },
            "delete": {
                "description": "Get record by uuid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID of record",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Print info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Info",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    }
                }
            }
        },
        "/list": {
            "get": {
                "description": "Get list of records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resources.PersonListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/jsonapi.ErrorsPayload"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "jsonapi.ErrorObject": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is an application-specific error code, expressed as a string value.",
                    "type": "string"
                },
                "detail": {
                    "description": "Detail is a human-readable explanation specific to this occurrence of the problem. Like title, this fieldâ€™s value can be localized.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a unique identifier for this particular occurrence of a problem.",
                    "type": "string"
                },
                "meta": {
                    "description": "Meta is an object containing non-standard meta-information about the error.",
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "description": "Status is the HTTP status code applicable to this problem, expressed as a string value.",
                    "type": "string"
                },
                "title": {
                    "description": "Title is a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
                    "type": "string"
                }
            }
        },
        "jsonapi.ErrorsPayload": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/jsonapi.ErrorObject"
                    }
                }
            }
        },
        "requests.GatewayRequest": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "duration": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "resources.Included": {
            "type": "object"
        },
        "resources.Links": {
            "type": "object",
            "properties": {
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                },
                "self": {
                    "type": "string"
                }
            }
        },
        "resources.Person": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/resources.PersonAttributes"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "resources.PersonAttributes": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "duration": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "resources.PersonListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resources.Person"
                    }
                },
                "included": {
                    "$ref": "#/definitions/resources.Included"
                },
                "links": {
                    "$ref": "#/definitions/resources.Links"
                }
            }
        },
        "resources.PersonResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/resources.Person"
                },
                "included": {
                    "$ref": "#/definitions/resources.Included"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/project",
	Schemes:          []string{},
	Title:            "REST API PROJECT",
	Description:      "Lab#2",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
